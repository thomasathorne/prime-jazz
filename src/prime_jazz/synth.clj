(ns prime-jazz.synth
  (:require [overtone.core :refer :all]))

(defn gen-harms
  [r n]
  (mapv #(Math/pow r %) (range n)))

(def harms
  [1.0 0.8 0.6400000000000001 0.5120000000000001 0.4096000000000001 0.3276800000000001 0.2621440000000001 0.20971520000000007 0.1677721600000001 0.13421772800000006 0.10737418240000006 0.08589934592000005 0.06871947673600004 0.054975581388800036 0.043980465111040035 0.03518437208883203 0.028147497671065624 0.022517998136852502 0.018014398509482003 0.014411518807585602 0.011529215046068483 0.009223372036854787 0.00737869762948383 0.005902958103587064 0.004722366482869652 0.0037778931862957215 0.0030223145490365774 0.002417851639229262 0.0019342813113834097 0.0015474250491067279 0.0012379400392853823 9.903520314283058E-4 7.922816251426448E-4 6.338253001141158E-4 5.070602400912927E-4 4.0564819207303417E-4 3.2451855365842736E-4 2.5961484292674194E-4 2.0769187434139353E-4 1.6615349947311485E-4])

(definst bounce
  [freq 220 dur 1]
  (let [env (env-gen:kr (perc 0.01 dur) 1 1 0 1 FREE)]
    (resonz
     (resonz
      (* env
         (apply + (map (fn [i h]
                         (* h (sin-osc (* i freq))))
                       (range) harms)))
      2400.0 0.6)
     1100.0 0.6)))
